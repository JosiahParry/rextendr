% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vendor.R
\name{vendor_pkgs}
\alias{vendor_pkgs}
\alias{use_cargo_vendor}
\title{Vendor Cargo Dependencies}
\usage{
vendor_pkgs(path = ".", quiet = FALSE)

use_cargo_vendor(path = ".", quiet = FALSE, overwrite = FALSE, lib_name = NULL)
}
\arguments{
\item{path}{File path to the package for which to generate wrapper code.}

\item{quiet}{Logical indicating whether any progress messages should be
generated or not.}

\item{overwrite}{Logical scalar or \code{NULL} indicating whether the files in the \code{path} should be overwritten.
If \code{NULL} (default), the function will ask the user whether each file should
be overwritten in an interactive session or do nothing in a non-interactive session.
If \code{FALSE} and each file already exists, the function will do nothing.
If \code{TRUE}, all files will be overwritten.}

\item{lib_name}{String that is used as the name of the Rust library.
If \code{NULL}, sanitized R package name is used instead.}
}
\value{
\code{NULL}. Used purely for side effects.
}
\description{
Creates the necessary infrastructure to vendor
Rust dependencies with an R package.
}
\details{
CRAN requires that any R package that uses Rust must also include
its dependencies in the package itself. This is to ensure that a
package can be installed in an offline manner.
\itemize{
\item \code{use_cargo_vendor()} creates the necessary files to vendor dependencies
\item \code{vendor_pkgs()} creates a compressed folder \code{vendor.tar.xz} which contains
the vendored dependencies that will be used in the build process.
}

If you have modified your dependencies, you will need need to repackage
the vendored dependencies with \code{vendor_pkgs()}.
}
\examples{

if (interactive()) {
 use_cargo_vendor()
 vendor_pkgs()
}
}
